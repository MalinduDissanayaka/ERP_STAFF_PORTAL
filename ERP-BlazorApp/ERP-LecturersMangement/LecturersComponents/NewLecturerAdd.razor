@using ERP_LecturersMangement.DTOs.Request
@using MudBlazor
@using FluentValidation
@using System.Net.Http.Json;
@using System.Text;
@using System.Text.Json;

@inject ISnackbar Snackbar



<MudContainer>
    <h3 class="text-center mb-4">Lecturers Add Page</h3>

    <MudCard>
        <MudCardContent>
            <MudForm Model="@model" @ref="@form"
                     Validation="@(lecturerValidator.ValidateValue)"
                     ValidationDelay="0">
                <MudGrid>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.FirstName"
                                      Label="First Name"
                                      Required="true"
                                      For="@(()=>model.FirstName)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.LastName"
                                      Label="Last Name"
                                      Required="true"
                                      For="@(()=>model.LastName)" />
                    </MudItem>

                    

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Email"
                                      Label="Email"
                                      Required="true"
                                      For="@(()=>model.Email)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="@model.Department"
                                        Label="Department"
                                        Required="true"
                                        For="@(() => model.Department)"
                        />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.DoB"
                                      Label="DoB"
                                      Required="true"
                                      For="@(()=>model.DoB)" />
                    </MudItem>


                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Phone"
                                      Label="Contact Number"
                                      Required="true"
                                      For="@(()=>model.Phone)" />
                    </MudItem>

                   


                </MudGrid>
            </MudForm>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="ml-auto"
                       OnClick="@(async () => await Submit())">Add</MudButton>
        </MudCardActions>

    </MudCard>
</MudContainer>




@code {

    [Parameter]
    public EventCallback onAdded { get; set; }

    private HttpClient Http = new HttpClient();

    private CreateLecturerRequest model = new CreateLecturerRequest();

    LecturerModelValidator lecturerValidator = new LecturerModelValidator();
    MudForm form;

    public class LecturerModelValidator : AbstractValidator<CreateLecturerRequest>
    {
        public LecturerModelValidator()
        {
            

            RuleFor(x => x.FirstName)
                .NotEmpty().WithMessage("First Name is Required.")
                .MinimumLength(3)
                .MaximumLength(20);

            RuleFor(x => x.LastName)
                .NotEmpty().WithMessage("Last Name is Required.")
                .MinimumLength(3)
                .MaximumLength(20);


            RuleFor(x => x.Phone)
                .NotEmpty().WithMessage("Contact number is required.")
                .Matches("^[0-9]*$").WithMessage("Contact number can only contain numbers.");

            RuleFor(x => x.Email)
            .NotEmpty().WithMessage("Email Address is Required.")
            .EmailAddress().WithMessage("Invalid Email Address Format.");
        }

        private async Task<bool> IsUniqueAsync(string email)
        {
            // Simulates a long running http call
            await Task.Delay(2000);
            return email.ToLower() != "test@test.com";
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreateLecturerRequest>
                .CreateWithOptions((CreateLecturerRequest)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private async Task Submit()
    {
        await form.Validate();
        try
        {
            if (form.IsValid)
            {
                var jsonModel = JsonSerializer.Serialize(model);
                var content = new StringContent(jsonModel, Encoding.UTF8, "application/json");
                var response = await Http.PostAsync("https://localhost:7055/api/LecturerManagement/", content);

                if (response.IsSuccessStatusCode)
                {
                    await onAdded.InvokeAsync();
                    form.Reset();
                    Snackbar.Add("Lecturer Added Successfully", MudBlazor.Severity.Success);
                }
                else
                {
                    Snackbar.Add("Please Check Your Connection.", MudBlazor.Severity.Error);
                }


            }
            else
            {
                Snackbar.Add("Please Check Input Fields", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", MudBlazor.Severity.Error);
        }
    }


    private List<string> digreeList = new List<string> { "EIE", "COM" };

}
