@using ERP_ModuleManagement.DTOs.Request
@using MudBlazor
@using FluentValidation
@using System.Net.Http.Json;
@using System.Text;
@using System.Text.Json;
@inject ISnackbar Snackbar



<MudContainer>
    <h3 class="text-center mb-4">Module Add Page</h3>

    <MudCard>
        <MudCardContent>
            <MudForm Model="@model" @ref="@form"
                     Validation="@(moduleValidator.ValidateValue)"
                     ValidationDelay="0">
                <MudGrid>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.ModuleName"
                                      Label="Module Name"
                                      Required="true"
                                      For="@(()=>model.ModuleName)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.ModuleCode"
                                      Label="Module Code"
                                      Required="true"
                                      For="@(()=>model.ModuleCode)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Semester"
                                      Label="Semester"
                                      Required="true"
                                      For="@(()=>model.Semester)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.ModuleCoordineter"
                                      Label="Module Coordinator"
                                      Required="true"
                                      For="@(()=>model.ModuleCoordineter)" />
                    </MudItem>                    

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Lectures"
                                      Label="Lecturer"
                                      Required="true"
                                      For="@(()=>model.Lectures)" />
                    </MudItem>


                </MudGrid>
            </MudForm>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="ml-auto"
                       OnClick="@(async () => await Submit())">Add</MudButton>
        </MudCardActions>

    </MudCard>
</MudContainer>




@code {

    [Parameter]
    public EventCallback onAdded { get; set; }

    private HttpClient Http = new HttpClient();

    private CreateModuleRequest model = new CreateModuleRequest();

    ModuleModelValidator moduleValidator = new ModuleModelValidator();
    MudForm form;

    public class ModuleModelValidator : AbstractValidator<CreateModuleRequest>
    {
        public ModuleModelValidator()
        {

            RuleFor(x => x.ModuleName)
                .NotEmpty().WithMessage("Module Name is Required.")
                .MinimumLength(3)
                .MaximumLength(20);

            RuleFor(x => x.ModuleCode)
                .NotEmpty().WithMessage("Module Code is Required.")
                .MinimumLength(3)
                .MaximumLength(20);

            RuleFor(x => x.Semester)
            .NotEmpty().WithMessage("Semester is Required.");

            RuleFor(x => x.ModuleCoordineter)
                .NotEmpty().WithMessage("Module Coordinator is Required.")
                .MinimumLength(3)
                .MaximumLength(20);


            RuleFor(x => x.Lectures)
            .NotEmpty().WithMessage("Lectures is Required.")
            .MinimumLength(3)
            .MaximumLength(20);




           
        }

       

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreateModuleRequest>
                .CreateWithOptions((CreateModuleRequest)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private async Task Submit()
    {
        await form.Validate();
        try
        {
            if (form.IsValid)
            {
                var jsonModel = JsonSerializer.Serialize(model);
                var content = new StringContent(jsonModel, Encoding.UTF8, "application/json");
                var response = await Http.PostAsync("https://localhost:7103/api/Module", content);

                if (response.IsSuccessStatusCode)
                {
                    await onAdded.InvokeAsync();
                    form.Reset();
                    Snackbar.Add("Module Added Successfully", MudBlazor.Severity.Success);
                }
                else
                {
                    Snackbar.Add("Please Check Your Connection.", MudBlazor.Severity.Error);
                }


            }
            else
            {
                Snackbar.Add("Please Check Input Fields", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", MudBlazor.Severity.Error);
        }
    }


   

}

